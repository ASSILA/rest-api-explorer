swagger: '2.0'
info:
  description: Provides access to the core features of Alfresco
  version: '1'
  title: Alfresco Core REST API
basePath: /alfresco/api/-default-/public/alfresco/versions/1
securityDefinitions:
  basicAuth:
    type: basic
    description: HTTP Basic Authentication
security:
  - basicAuth: []
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: comments
    description: Retrieve and manage Comments
    externalDocs:
      description: Find more information on comments here
      url: http://docs.alfresco.com/5.1/pra/1/concepts/pra-nodes-comments.html
  - name: favorites
    description: Retrieve and manage Favorites
    externalDocs:
      description: Find more information on favorites here
      url: http://docs.alfresco.com/5.1/pra/1/concepts/pra-favorites.html
  - name: networks
    description: Retrieve and manage Networks
  - name: people
    description: Retrieve and manage People
  - name: ratings
    description: Retrieve and manage Ratings
  - name: sites
    description: Retrieve and manage Sites
  - name: tags
    description: Retrieve and manage Tags
parameters:
  nodeIdParam:
    name: nodeId
    in: path
    description: The identifier of a node.
    required: true
    type: string
  personIdParam:
    name: personId
    in: path
    description: The identifier of a person.
    required: true
    type: string
  siteIdParam:
    name: siteId
    in: path
    description: The identifier of a site.
    required: true
    type: string
  tagIdParam:
    name: tagId
    in: path
    description: The identifier of a tag.
    required: true
    type: string
  networkIdParam:
    name: networkId
    in: path
    description: The identifier of a network.
    required: true
    type: string
  commentIdParam:
    name: commentId
    in: path
    description: The identifier of a comment.
    required: true
    type: string
  ratingIdParam:
    name: ratingId
    in: path
    description: The identifier of a rating.
    required: true
    type: string
  favoriteIdParam:
    name: favoriteId
    in: path
    description: The identifier of a favorite.
    required: true
    type: string
  skipCountParam:
    name: skipCount
    in: query
    description: The number of entities that exist in the collection before those included in this list.
    required: false
    type: integer
  maxItemsParam:
    name: maxItems
    in: query
    description: The maximum number of items to return in the list.
    required: false
    type: integer
  propertiesParam:
    name: properties
    in: query
    description: A list of property names. You can use the properties parameter to restrict the number of returned properties.
    required: false
    type: array
    items:
      type: string
    collectionFormat: csv
  orderByParam:
    name: "orderBy"
    in: "query"
    description: A string to control the order of the entities returned.
    required: false
    type: "string"
  whereParam:
    name: "where"
    in: "query"
    description: A string to restrict the returned objects by using a predicate.
    required: false
    type: "string"
  relationsParam:
    name: "relations"
    in: "query"
    description: Use the relations parameter to include one or more related entities in a single response.
    required: false
    type: array
    items:
      type: string
    collectionFormat: csv
paths:
  '/nodes/{nodeId}/comments':
    get:
      tags:
        - comments
      summary: Get comments
      description: Returns a list of comments for the node identified by **nodeId**, sorted chronologically with the newest first.
      operationId: getComments
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/CommentPaging'
        '400':
          description: If the **nodeId** exists, but does not identify a file or a folder
        '403':
          description: If the user does not have permission read comments on the node
        '404':
          description: If **nodeId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - comments
      summary: Add a comment
      description: |
        Creates one or more comments on node **nodeId**. You can create more than one comment by 
        specifying a list of comments in the JSON body like this:      
        
        ```JSON
        [
          {
            "content": "This is a comment"
          },
          {
            "content": "This is another comment"
          }
        ]
        ```
      operationId: addComment
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - in: body
          name: commentBody
          description: The comment text. Note that you can provide an array of comments.
          required: true
          schema:
            required:
              - content          
            properties:
              content:
                type: string
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/definitions/CommentEntry'
        '400':
          description: If an empty comment is provided
        '403':
          description: If the user does not have permission to add a comment           
        '404':
          description: If **nodeId** does not exist
        '405':
          description: If it is not possible to comment on a node of this type
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/nodes/{nodeId}/comments/{commentId}':
    put:
      tags:
        - comments
      summary: Update a comment
      description: Updates an existing comment **commentId** on node **nodeId**.
      operationId: updateComment
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - $ref: '#/parameters/propertiesParam'
        - $ref: '#/parameters/commentIdParam'
        - in: body
          name: commentBody
          description: The JSON representing the comment to be updated.
          required: true
          schema:
            required:
              - content          
            properties:
              content:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/CommentEntry'
        '400':
          description: If an empty comment is provided
        '403':
          description: If the user does not have permission to update a comment
        '404':
          description: If **nodeId** or **commentId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - comments
      summary: Delete a comment
      description: Removes the comment **commentId** from node **nodeId**.
      operationId: removeComment
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - $ref: '#/parameters/commentIdParam'
      responses:
        '204':
          description: Successful response
        '403':
          description: If the user does not have permission to delete a comment
        '404':
          description: If **nodeId** or **commentId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/nodes/{nodeId}/ratings':
    get:
      tags:
        - ratings
      summary: Get ratings
      description: Get the ratings for node **nodeId**.
      operationId: getRatings
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/RatingPaging'
        '404':
          description: If **nodeId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - ratings
      summary: Rate
      description: Rate the node with identifier **nodeId**
      operationId: rate
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - in: body
          name: ratingBody
          description: |
            For "myRating" the type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar.

            For example, to "like" a file the following body would be used:

              ```JSON
                {
                  "id": "likes",
                  "myRating": true
                }
              ```
          required: true
          schema:
            required:
              - id
              - myRating
            properties:
              id:
                type: string
                description: The rating scheme type. Possible values are likes and fiveStar.
                default: likes
                enum:
                  - likes
                  - fiveStar
              myRating:
                type: string
                description: The rating. The type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/definitions/RatingEntry'
        '400':
          description: If an unknown rating scheme is supplied
        '404':
          description: If **nodeId** does not exist
        '405':
          description: If is not possible to rate a node of this type
        '409':
          description: If **nodeId** has already been rated
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/nodes/{nodeId}/ratings/{ratingId}':
    get:
      tags:
        - ratings
      summary: Get a rating
      description: Get the specific rating **ratingId** on node **nodeId**.
      produces:
        - application/json
      operationId: getRating
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - $ref: '#/parameters/ratingIdParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/RatingEntry'
        '400':
          description: If **ratingId** does not exist
        '404':
          description: If **nodeId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - ratings
      summary: Delete a rating
      description: Removes rating **ratingId** from node **nodeId**.
      operationId: removeRating
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - $ref: '#/parameters/ratingIdParam'
      responses:
        '204':
          description: Successful response
        '404':
          description: If **nodeId** or **ratingId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/nodes/{nodeId}/tags':
    get:
      tags:
        - tags
      summary: Get tags
      description: Returns a list of tags for node **nodeId**.
      operationId: getNodeTags
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/TagPaging'
        '403':
          description: If the user does not have permission to read tags on the node            
        '404':
          description: If **nodeId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - tags
      summary: Add a tag
      description: |
        Adds one or more tags to the node **nodeId**. You can create more than one tag by 
        specifying a list of tags in the JSON body like this:      
        
        ```JSON
        [
          {
            "tag":"test-tag-1"
          },
          {
            "tag":"test-tag-2"
          }
        ]
        ```
      operationId: addTag
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - in: body
          name: tagBody
          description: The new tag
          required: true
          schema:
            required:
              - tag          
            properties:
              tag:
                type: string
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/definitions/TagEntry'
        '400':
          description: If an empty tag is provided
        '403':
          description: If the user does not have permission to add tags on the node                      
        '404':
          description: If **nodeId** does not exist
        '409':
          description: The **nodeId** has already been tagged          
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/nodes/{nodeId}/tags/{tagId}':
    delete:
      tags:
        - tags
      summary: Delete a tag
      description: Removes tag **tagId** from node **nodeId**.
      operationId: removeTag
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/nodeIdParam'
        - $ref: '#/parameters/tagIdParam'
      responses:
        '204':
          description: Successful response
        '403':
          description: If the user does not have permission to delete the tag
        '404':
          description: If **nodeId** or **tagId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}':
    get:
      tags:
        - people
      summary: Get a person
      description: Gets information for the person **personId**.
      operationId: getPerson
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PersonEntry'
        '404':
          description: If **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/activities':
    get:
      tags:
        - people
      summary: Get activities
      description: Returns a list of activities for person **personId**.
      operationId: getActivities
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
        - name: who
          in: query
          description: |
            A filter to include the user's activities only `-me-`, other user's activities only `-others-`'
          required: false
          type: string
        - name: siteId
          in: query
          description: Include only activity feed entries relating to this site.
          required: false
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ActivityPaging'
        '404':
          description: If **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/favorite-sites':
    get:
      deprecated: true
      tags:
        - people
      summary: Get favorite sites
      description: |
        Get a person's favorite sites.

        **Please note that this method is deprecated and will be removed in the future**.
        Use `/people/{personId}/favorites` instead.
      operationId: getFavoriteSites
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SitePaging'
        '404':
          description: If **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    post:
      deprecated: true
      tags:
        - people
      summary: Favorite a site
      description: |
        Add a favorite site for person **personId**. 
          
        **Please note that this method is deprecated and will be removed in the future**.
        Use `/people/{personId}/favorites` instead.
      operationId: favoriteSite
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - in: body
          name: favoriteSiteBody
          description: The id of the site to favorite.
          required: true
          schema: 
            properties:
              id:
                type: string
      responses:
        '201':
          description: Successful response
          schema:
            type: object
            required:
              - entry
            properties:
              entry:
                type: object
                required:
                - id
                properties:
                  id:
                    type: string
        '404':
          description: If **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/favorite-sites/{siteId}':
    get:
      deprecated: true
      tags:
        - people
      summary: Get a favorite site
      description: |
        Returns information on favorite site **siteId** of person **personId**. 
        
        **Please note that this method is deprecated and will be removed in the future.**
        Use `/people/{personId}/favorites/{favoriteId}` instead.
      operationId: getFavoriteSite
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/siteIdParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteEntry'
        '404':
          description: If **personId** or **siteId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    delete:
      deprecated: true
      tags:
        - people
      summary: Delete favorite site
      description: |
        Removes site **siteId** from the favorite site list of person **personId**. 
        
        **Please note that this method is deprecated and will be removed in the future.**
        Use `/people/{personId}/favorites/{favoriteId}` instead.
      operationId: deleteFavoriteSite
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/siteIdParam'
      responses:
        '200':
          description: Successful response
        '404':
          description: If **personId** or **siteId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/favorites':
    get:
      tags:
        - favorites
        - people
      summary: Get favorites
      description: |
        Returns a list of favorites for person **personId**.
        
        You can us the `-me-` string in place of `<personId>` to get the favorites of the currently authenticated user.        
        
        You can use the **where** parameter to restrict the list in the response
        to entries of a specific kind. The **where** parameter takes a value.
        The value is a single predicate that can include one or more **EXISTS** 
        conditions. The **EXISTS** condition uses a single operand to limit the
        list to include entries that include that one property. The property values are:-
        
        *   `target/file`
        *   `target/folder`
        *   `target/site`
        
        For example, the following **where** parameter restricts the returned list to the file favorites for a person:

        ```SQL
        (EXISTS(target/file))
        ```
        You can specify more than one condition using **OR**. The predicate must be enclosed in parentheses.
        
        
        For example, the following **where** parameter restricts the returned list to the file and folder favorites for a person:

        ```SQL
        (EXISTS(target/file) OR EXISTS(target/folder))
        ```
      operationId: getFavorites
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
        - $ref: '#/parameters/whereParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/FavoritePaging'
        '400':
          description: An invalid **where** parameter was specified
        '404':
          description: If **personId** does not exist, or the current user does not have permission to access the favorites of **personId**
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - favorites
        - people
      summary: Add a favorite
      description: Favorite a **site**, **file**, or **folder** in the repository.
      operationId: addFavorite
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - in: body
          name: favoriteBody
          description: |      
            An object identifying the entity to be favorited. 
            
            The object consists of a single property which is an object with the name `site`, `file`, or `folder`. 
            The content of that object is the `guid` of the target entity.
            
            For example, to favorite a file the following body would be used:
            
            ```JSON
            {
               "target": {
                  "file": {
                     "guid": "abcde-01234"
                  }
               }
            }
            ```
          required: true
          schema:
            required:
              - target
            properties:
               target:
                  type: object
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/definitions/FavoriteEntry'
        '400':
          description: The target **guid** does not describe a site, file, or folder 
        '404':
          description: |
            If **personId** does not exist, or the target entity does not exist, 
            or a favorite already exists with the specified id, or an 
            entity does exist with the id of the posted object, 
            but is not of the same type of the posted object
        '409':
          description: The target **guid** has already been favorited            
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/favorites/{favoriteId}':
    get:
      tags:
        - favorites
        - people
      summary: Get a favorite
      description: Returns favorite **favoriteId** for person **personId**.
      operationId: getFavorite
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/favoriteIdParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/FavoriteEntry'
        '404':
          description: |
            If **personId** does not exist, or the target entity does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - favorites
        - people
      summary: Delete a favorite
      description: Removes **favoriteId** as a favorite of person **personId**.
      operationId: removeFavoriteSite
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/favoriteIdParam'
      responses:
        '204':
          description: Successful response
        '404':
          description: |
            If **personId** does not exist, or the target entity does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/networks':
    get:
      tags:
        - people
        - networks
      summary: Get network membership for a person
      description: Gets a list of network memberships for person **personId**.
      operationId: getPersonNetworks
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PersonNetworkPaging'
        '404':
          description: If **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/networks/{networkId}':
    get:
      tags:
        - people
        - networks
      summary: Get network information
      description: Returns network information on a single network specified by **networkId** for **personId**.
      operationId: getPersonNetwork
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/networkIdParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PersonNetworkEntry'
        '404':
          description: If **personId** or **networkId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/preferences':
    get:
      tags:
        - people
      summary: Get preferences
      description: |
        Returns a list of preferences for person **personId**.
        
        Note that each preference consists of an **id** and a **value**. 
        The **value** can be of any JSON type.
      operationId: getPreferences
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PreferencePaging'
        '404':
          description: If **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/preferences/{preferenceName}':
    get:
      tags:
        - people
      summary: Get a preference
      description: Returns a specific preference for person **personId**.
      operationId: getPreference
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - name: preferenceName
          in: path
          description: The name of the preference.
          required: true
          type: string
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PreferenceEntry'
        '404':
          description: If **personId** or **preferenceName** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/site-membership-requests':
    get:
      tags:
        - people
        - sites
      summary: Get site membership requests
      description: Returns the current site membership requests for person **personId**.
      operationId: getSiteMembershipRequests
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteMembershipRequestPaging'
        '404':
          description: If **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - people
        - sites
      summary: Create a site membership request
      description: Create a site membership request for **personId** and **siteId**. The **personId** will be invited to the site as a SiteConsumer.
      operationId: addSiteMembershipRequest
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - in: body
          name: siteMembershipBody
          description: Site membership request details
          required: true
          schema:
            properties:
              message:
                type: string
              id:
                type: string
              title:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteMembershipRequestEntry'
        '404':
          description: If **personId** or **siteId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/site-membership-requests/{siteId}':
    get:
      tags:
        - people
        - sites      
      summary: Get a site membership request
      description: Returns the site membership request for site **siteId** for person **personId**, if one exists.
      operationId: getSiteMembershipRequest
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/siteIdParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteMembershipRequestEntry'
        '404':
          description: If **personId** or **siteId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - people
        - sites
      summary: Update a site membership request
      description: Updates the message for the site membership request to site **siteId** for person **personId**.
      operationId: updateSiteMembershipRequest
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/siteIdParam'
        - in: body
          name: siteMembershipBody
          description: The new message to display
          required: true
          schema:
            properties:
              message:
                type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - people
        - sites
      summary: Cancel a site membership
      description: Cancels the site membership request to site **siteId** for person **personId**.
      operationId: removeSiteMembershipRequest
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/siteIdParam'
      responses:
        '200':
          description: Successful response
        '404':
          description: If **personId** or **siteId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/people/{personId}/sites':
    get:
      tags:
        - people
        - sites
      summary: Get site membership information
      description: |
        Returns a list of site membership information for person **personId**.
        You can sort the list of sites using the **orderBy** parameter.
        
        **orderBy** specifies the name of one or more 
        comma separated properties. 
        For each property you can optionally specify the order direction. 
        Both of the these **orderBy** examples retrieve sites ordered by ascending name:
        
        ```
        name
        name ASC
        ```
      operationId: getSiteMembership
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
        - $ref: '#/parameters/orderByParam'
        - $ref: '#/parameters/relationsParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SitePaging'
        '404':
          description: If **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  /sites:
    get:
      tags:
        - sites
      summary: Get sites
      description: |
        Returns a list of sites in this repository. You can sort the list if sites using the **orderBy** parameter.
        **orderBy** specifies the name of one or more 
        comma separated properties. 
        For each property you can optionally specify the order direction. 
        Both of the these **orderBy** examples retrieve sites ordered by ascending name:
        
        ```
        name
        name ASC
        ```
        
        You can use the **relations** parameter to include one or more related
        entities in a single response and so reduce network traffic.
        
        The entity types in Alfresco are organized in a tree structure.
        The **sites** entity has two children, **containers** and **members**. 
        The following relations parameter returns all the container and member 
        objects related to each site:
        
        ```
        containers,members
        ```
      operationId: getSites
      parameters:
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
        - $ref: '#/parameters/orderByParam'
        - $ref: '#/parameters/relationsParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SitePaging'
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/sites/{siteId}':
    get:
      tags:
        - sites
      summary: Get a site
      description: |
        Returns information for site **siteId**.
        
        You can use the **relations** parameter to include one or more related
        entities in a single response and so reduce network traffic.
        
        The entity types in Alfresco are organized in a tree structure.
        The **sites** entity has two children, **containers** and **members**. 
        The following relations parameter returns all the container and member 
        objects related to the site **siteId**:
        
        ```
        containers,members
        ```
      operationId: getSite
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/siteIdParam'
        - $ref: '#/parameters/propertiesParam'
        - $ref: '#/parameters/relationsParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteEntry'
        '404':
          description: If **siteId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/sites/{siteId}/containers':
    get:
      tags:
        - sites
      summary: Get containers
      description: Returns a list of containers information for site identified by **siteId**.
      operationId: getSiteContainers
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/siteIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteContainerPaging'
        '404':
          description: If **siteId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/sites/{siteId}/containers/{containerId}':
    get:
      tags:
        - sites
      summary: Get a container
      description: Returns information on the container **containerId** in site **siteId**.
      operationId: getSiteContainer
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/siteIdParam'
        - name: containerId
          in: path
          description: The unique identifier of a site container.
          required: true
          type: string
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteContainerEntry'
        '404':
          description: If **siteId** or **containerId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/sites/{siteId}/members':
    get:
      tags:
        - sites
      summary: Get members
      description: Returns a list of site memberships for site **siteId**.
      operationId: getSiteMembers
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/siteIdParam'
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteMemberPaging'
        '404':
          description: If **siteId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - sites
      summary: Add a person
      description: |
        Adds person **personId** as a member of site **siteId**.
        
        You can set the **role** to one of four types:
        
        * SiteConsumer
        * SiteCollaborator
        * SiteContributor
        * SiteManager
      operationId: addSiteMember
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/siteIdParam'
        - in: body
          name: siteMemberBody
          description: The person to add and their role
          required: true
          schema:
            properties:
              role:
                type: string
                enum:
                - SiteConsumer
                - SiteCollaborator
                - SiteContributor
                - SiteManager
              id:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteMemberEntry'
        '404':
          description: If **siteId** or **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/sites/{siteId}/members/{personId}':
    get:
      tags:
        - sites
        - people
      summary: Get a site member
      description: Returns site membership information for person **personId** on site **siteId**.
      operationId: getSiteMember
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/siteIdParam'
        - $ref: '#/parameters/personIdParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteMemberEntry'
        '404':
          description: If **siteId** or **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - sites
      summary: Update a site member
      description: |
        Update the membership of person **personId** in site **siteId**.
        
        You can set the **role** to one of four types:
        
        * SiteConsumer
        * SiteCollaborator
        * SiteContributor
        * SiteManager
      operationId: updateSiteMember
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/siteIdParam'
        - $ref: '#/parameters/personIdParam'
        - in: body
          name: siteMemberRoleBody
          description: The persons new role
          required: true
          schema:
            properties:
              role:
                type: string
                enum:
                - SiteConsumer
                - SiteCollaborator
                - SiteContributor
                - SiteManager
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SiteMemberEntry'
        '400':
          description: If the role does not exist
        '404':
          description: If **siteId** or **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - sites
      summary: Delete a site member
      description: Removes person **personId** as a member of site **siteId**.
      operationId: removeSiteMember
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/siteIdParam'
        - $ref: '#/parameters/personIdParam'
      responses:
        '204':
          description: Successful response
        '404':
          description: If **personId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  /tags:
    get:
      tags:
        - tags
      summary: Get tags
      description: Returns a list of tags in this repository.
      operationId: getTags
      parameters:
        - $ref: '#/parameters/skipCountParam'
        - $ref: '#/parameters/maxItemsParam'
        - $ref: '#/parameters/propertiesParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/TagPaging'
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/tags/{tagId}':
    get:
      tags:
        - tags
      summary: Get a tag
      description: Return a specific tag with **tagId**.
      produces:
        - application/json
      operationId: getTag
      parameters:
        - $ref: '#/parameters/tagIdParam'
        - $ref: '#/parameters/propertiesParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/TagEntry'
          examples:
            application/json:
              id: ed2444b5-d0c1-440b-b5b8-34a53e578091
              tag: test tag 1
        '404':
          description: Tag Not Found
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - tags
      summary: Update a tag
      description: Updates the tag **tagId**.
      operationId: updateTag
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/tagIdParam'
        - in: body
          name: tagBody
          description: The updated tag
          required: true
          schema:
            required:
              - tag          
            properties:
              tag:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/TagEntry'
        '400':
          description: If an empty tag is provided            
        '404':
          description: If **tagId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
  '/networks/{networkId}':
    get:
      tags:
        - networks
      summary: Get a network
      description: Returns information for a network **networkId**.
      operationId: getNetwork
      parameters:
        - $ref: '#/parameters/networkIdParam'
        - $ref: '#/parameters/propertiesParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PersonNetworkEntry'
        '404':
          description: If **networkId** does not exist
        default:
          description: Error response
          schema:
            $ref: '#/definitions/Error'
definitions:
  Error:
    type: object
    required:
      - error
    properties:
      error:
        type: object
        required:
          - statusCode
          - briefSummary
          - stackTrace
          - descriptionURL
        properties:
          errorKey:
            type: string
          statusCode:
            type: integer
            format: int32
          briefSummary:
            type: string
          stackTrace:
            type: string
          descriptionURL:
            type: string
  Pagination:
    type: object
    required:
      - count
      - hasMoreItems
      - skipCount
      - maxItems
    properties:
      count:
        type: integer
        format: int32
        description: |
          The number of objects in the entries array.
      hasMoreItems:
        type: boolean
        description: |
          A boolean value which is **true** if there are more entities in the collection 
          beyond those in this response. A true value means a request with a larger value 
          for the **skipCount** or the **maxItems** parameter will return more entities.
      totalItems:
        type: integer
        format: int64
        description: |
          An integer describing the total number of entities in the collection. 
          The API might not be able to determine this value, 
          in which case this property will not be present.
      skipCount:
        type: integer
        format: int64
        description: |
          An integer describing how many entities exist in the collection before 
          those included in this list.
      maxItems:
        type: integer
        format: int64
        description: |
          The value of the **maxItems** parameter used to generate this list,
          or if there was no **maxItems** parameter the default value, 10
  SitePaging:
    type: object
    required:
      - list
    properties:
      list:
        type: object
        required:
          - pagination
          - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/SiteEntry'
  SiteEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/Site'
  Site:
    type: object
    required:
      - id
      - guid
      - title
      - visibility
    properties:
      id:
        type: string
      guid:
        type: string
      title:
        type: string
      description:
        type: string
      visibility:
        type: string
        enum:
          - PRIVATE
          - MODERATED
          - PUBLIC
      role:
        type: string
  SiteContainerPaging:
    type: object
    required:
     - list
    properties:
      list:
        type: object
        required:
          - pagination
          - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/SiteContainerEntry'
  SiteContainerEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/SiteContainer'
  SiteContainer:
    type: object
    required:
      - id
      - folderId
    properties:
      id:
        type: string
      folderId:
        type: string
  SiteMemberPaging:
    type: object
    required:
      - list
    properties:
      list:
        type: object
        required:
          - pagination
          - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/SiteMemberEntry'
  SiteMemberEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/SiteMember'
  SiteMember:
    type: object
    required:
      - id
      - person
      - role
    properties:
      id:
        type: string
      person:
        type: object
        $ref: '#/definitions/Person'
      role:
        type: string
        enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
  PersonEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/Person'
  Person:
    type: object
    required:
      - id
      - firstName
      - lastName
      - email
      - enabled
    properties:
      id:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      description:
        type: string
      avatarId:
        type: string
      email:
        type: string
      skypeId:
        type: string
      googleId:
        type: string
      instantMessageId:
        type: string
      jobTitle:
        type: string
      location:
        type: string
      company:
        type: object
        $ref: '#/definitions/Company'
      mobile:
        type: string
      telephone:
        type: string
      statusUpdatedAt:
        type: string
        format: date
      userStatus:
        type: string
      enabled:
        type: boolean
        default: true
      emailNotificationsEnabled:
        type: boolean
  Company:
    type: object
    properties:
      organization:
        type: string
      address1:
        type: string
      address2:
        type: string
      address3:
        type: string
      postcode:
        type: string
      telephone:
        type: string
      fax:
        type: string
      email:
        type: string
  CommentPaging:
    type: object
    required:
      - list
    properties:
      list:
        type: object
        required:
         - pagination
         - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/CommentEntry'
  CommentEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/Comment'
  Comment:
    type: object
    required:
      - id
      - content
      - createdBy
      - createdAt
      - edited
      - modifiedBy
      - modifiedAt
      - canEdit
      - canDelete
    properties:
      id:
        type: string
      content:
        type: string
      createdBy:
        type: object
        $ref: '#/definitions/Person'
      createdAt:
        type: string
        format: date
      edited:
        type: boolean
      modifiedBy:
        type: object
        $ref: '#/definitions/Person'
      modifiedAt:
        type: string
        format: date
      canEdit:
        type: boolean
      canDelete:
        type: boolean
  TagPaging:
    type: object
    required:
      - list
    properties:
      list:
        type: object
        required:
          - pagination
          - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/TagEntry'
  TagEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/Tag'
  Tag:
    type: object
    required:
      - id
      - tag
    properties:
      id:
        type: string
      tag:
        type: string
  PersonNetworkPaging:
    type: object
    required:
      - list
    properties:
      list:
        type: object
        required:
          - pagination
          - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/PersonNetworkEntry'
  PersonNetworkEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/PersonNetwork'
  PersonNetwork:
    type: object
    description: |
      A network is the group of users and sites that belong to an organization.
      Networks are organized by email domain. When a user signs up for an
      Alfresco account , their email domain becomes their Home Network.
    required:
      - id
      - isEnabled
    properties:
      id:
        type: string
        description: This network's unique id
      homeNetwork:
        type: boolean
        description: Is this the home network?
      isEnabled:
        type: boolean
      createdAt:
        type: string
        format: date-time
      paidNetwork:
        type: boolean
      subscriptionLevel:
        type: string
        enum:
          - Free
          - Standard
          - Enterprise
      quotas:
        type: array
        items:
          type: object
          $ref: '#/definitions/NetworkQuota'
  NetworkQuota:
    type: object
    description: |
      Limits and usage of each quota. A network will have quotas for File space,
      the number of sites in the network, the number of people in the network,
      and the number of network administrators
    required:
      - id
      - limit
      - usage
    properties:
      id:
        type: string
      limit:
        type: integer
        format: int64
      usage:
        type: integer
        format: int6
  RatingPaging:
    type: object
    required:
      - list
    properties:
      list:
        type: object
        required:
          - pagination
          - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/RatingEntry'
  RatingEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/Rating'
  Rating:
    type: object
    description: |
      A person can rate an item of content by liking it. They can also remove
      their like of an item of content. API methods exist to get a list of
      ratings and to add a new rating.
    required:
      - id
      - aggregate
    properties:
      id:
        type: string
      aggregate:
        type: object
        required:
          - numberOfRatings
        properties:
          numberOfRatings:
            type: integer
          average:
            type: integer
      ratedAt:
        type: string
        format: date-time
      myRating:
        type: string
        description: The rating. The type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar.
  FavoritePaging:
    type: object
    required:
      - list
    properties:
      list:
        type: object
        required:
          - pagination
          - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/FavoriteEntry'
  FavoriteEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/Favorite'
  Favorite:
    type: object
    description: |
      A favorite describes an Alfresco entity that a person has marked as a favorite.
      The target can be a site, file or folder.
    required:
      - targetGuid
      - target
    properties:
      targetGuid:
        type: string
        description: The guid of the object that is a favorite.
      createdAt:
        type: string
        format: date
        description: The time the object was made a favorite.
      target:
        type: object
  ActivityPaging:
    type: object
    required:
      - list
    properties:
      list:
        type: object
        required:
          - pagination
          - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/ActivityEntry'
  ActivityEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/Activity'
  Activity:
    type: object
    description: |
      Activities describe any past activity in a site,
      for example creating an item of content, commenting on a node,
      liking an item of content.
    required:
      - postPersonId
      - id
      - feedPersonId
      - activityType
    properties:
      postPersonId:
        type: string
        description: The id of the person who performed the activity
      id:
        type: long
        description: The unique id of the activity
      siteId:
        type: string
        description: The unique id of the site on which the activity was performed
      postedAt:
        type: string
        format: date-time
        description: The date time at which the activity was performed
      feedPersonId:
        type: string
        description: The feed on which this activity was posted
      activitySummary:
        type: object
        description: An object summarizing the activity
        properties:
          firstName:
            type: string
          lastName:
            type: string
          parentObjectId:
            type: string
          title:
            type: string
          objectId:
            type: string
      activityType:
        description: The feed on which this activity was posted
        type: string
        enum:
          - org.alfresco.comments.comment-created
          - org.alfresco.comments.comment-updated
          - org.alfresco.comments.comment-deleted
          - org.alfresco.documentlibrary.files-added
          - org.alfresco.documentlibrary.files-updated
          - org.alfresco.documentlibrary.files-deleted
          - org.alfresco.documentlibrary.file-added
          - org.alfresco.documentlibrary.file-created
          - org.alfresco.documentlibrary.file-deleted
          - org.alfresco.documentlibrary.file-downloaded
          - org.alfresco.documentlibrary.file-liked
          - org.alfresco.documentlibrary.file-previewed
          - org.alfresco.documentlibrary.inline-edit
          - org.alfresco.documentlibrary.folder-liked
          - org.alfresco.site.user-joined
          - org.alfresco.site.user-left
          - org.alfresco.site.user-role-changed
          - org.alfresco.site.group-added
          - org.alfresco.site.group-removed
          - org.alfresco.site.group-role-changed
          - org.alfresco.discussions.reply-created
          - org.alfresco.subscriptions.followed
          - org.alfresco.subscriptions.subscribed
  PreferencePaging:
    type: object
    required:
      - list
    properties:
      list:
        type: object
        required:
          - pagination
          - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/PreferenceEntry'
  PreferenceEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/Preference'
  Preference:
    type: object
    description: |
      A specific preference.
    required:
      - id
      - value
    properties:
      id:
        type: string
        description: The unique id of the preference
      value:
        type: string        
        description: The value of the preference. Note that this can be of any JSON type.
  SiteMembershipRequestPaging:
    type: object
    required:
      - list
    properties:
      list:
        type: object
        required:
          - pagination
          - entries
        properties:
          pagination:
            $ref: '#/definitions/Pagination'
          entries:
            type: array
            items:
              type: object
              $ref: '#/definitions/SiteMembershipRequestEntry'
  SiteMembershipRequestEntry:
    type: object
    required:
      - entry
    properties:
      entry:
        type: object
        $ref: '#/definitions/SiteMembershipRequest'
  SiteMembershipRequest:
    type: object
    required:
      - id
      - createdAt
      - entry
    properties:
      id:
        type: string
      createdAt:
        type: string
        format: date-time
      entry:
        type: object
        $ref: '#/definitions/Site'